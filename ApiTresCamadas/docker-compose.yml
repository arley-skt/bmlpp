version: "3.8"

services:
  postgres:
    image: postgres:latest
    environment:
      - POSTGRES_PASSWORD=root
      - POSTGRES_USER=root
      - DOTNET_ENVIRONMENT=Development
      - PGDATA=/data/postgres
    ports:
      - "5432:5432"
    volumes:
      - "postgresvol:/data/postgres"
    networks:
      - nesjs-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U root"]
      interval: 30s
      timeout: 10s
      retries: 5

  pgadmin:
        image: dpage/pgadmin4
        environment:
          PGADMIN_DEFAULT_EMAIL: "admin@root.com"
          PGADMIN_DEFAULT_PASSWORD: "root"
        ports:
          - "8081:80"
        depends_on:
          - postgres
        networks:
          - nesjs-network
  
  apitrescamadas:
    image: api-trescamadas
    depends_on:
     - "postgres"
    container_name: api-trescamadas
    ports:
      - "5009:80"
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=User ID =root;Password=root;Server=postgres;Port=5432;Database=postgres; Integrated Security=true;Pooling=true;
      - ASPNETCORE_URLS=http://+:80
    networks:
      - nesjs-network
  # dev:
  #   container_name: ecoa_api_dev
  #   image: ecoa-api-dev:1.0.0
  #   build:
  #     context: .
  #     # target: development
  #     dockerfile: ./Dockerfile
  #   # entrypoint: ["npm", "run", "start:${NODE_ENV}"]
  #   env_file:
  #     - .env
  #   # command: run migrate:up && npm run start:dev
  #   ports:
  #     - 3000:3000
  #     - 9229:9229
  #   networks:
  #     - nesjs-network
  #   depends_on:
  #     - postgres
  #   environment:
  #     DB_PASS: ${DATABASE_PASS}
  #     DB_USER: ${DATABASE_USER}
  #     DB_DATA: ${DATABASE_NAME}
  #     DB_HOST: postgres
  #   volumes:
  #     - .:/usr/src/app
  #     - /usr/src/app/node_modules
  #   restart: unless-stopped
  
networks:
  nesjs-network:
    driver: bridge

volumes:
  postgresvol:
